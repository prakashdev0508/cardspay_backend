generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  String  @id @default(cuid())
  company_name        String
  registration_number String?
  address             String?
  email               String  @unique

  additinal_information Json?
  user                  User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Departments {
  id               String  @id @default(cuid())
  departments_name String
  is_active        Boolean @default(true)
  is_deleted       Boolean @default(false)

  user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles {
  id         String  @id @default(cuid())
  role_name  String
  role_slug  String? @unique
  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  users UserRoles[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  password     String
  phone_number String?
  company_id   String
  company      Company @relation(fields: [company_id], references: [id])

  department_id String?
  department    Departments? @relation(fields: [department_id], references: [id])

  userRoles UserRoles[]

  is_active  Boolean @default(true)
  is_deleted Boolean @default(false)

  customerInfo CustomerData[]
  services     Services[]
  cardDetails  CardsDetails[]
  charges      Charges[]
  transaction  Transaction[]
  bankDetails  BankDetails[]

  email_verified_at DateTime?
  is_verified       Boolean   @default(false)

  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, email, phone_number])
}

model UserRoles {
  userId String
  roleId String

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Services {
  id   String @id @default(cuid())
  name String

  customer_info CustomerData[]

  created_by String
  createdBy  User   @relation(fields: [created_by], references: [id])

  charge      Charges[]
  transaction Transaction[]

    is_deleted Boolean @default(false)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankDetails {
  id   String @id @default(cuid())
  name String

  created_by String
  createdBy  User   @relation(fields: [created_by], references: [id])

  cardDetails CardsDetails[]
  charges     Charges[]

  transaction Transaction[]

    is_deleted Boolean @default(false)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CardsDetails {
  id   String @id @default(cuid())
  name String

  created_by String
  createdBy  User   @relation(fields: [created_by], references: [id])

  charge Charges[]
  amount Transaction[]

  bankId String?
  bank   BankDetails? @relation(fields: [bankId], references: [id])

    is_deleted Boolean @default(false)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Charges {
  id                String @id @default(cuid())
  user_charge       Int?
  company_charge    Int?
  platform_charge   Int?
  additional_charge Int?

  cardId String?
  card   CardsDetails? @relation(fields: [cardId], references: [id])

  serviceId String?
  service   Services? @relation(fields: [serviceId], references: [id])

  created_by String
  createdBy  User   @relation(fields: [created_by], references: [id])

  bankId String?
  bank   BankDetails? @relation(fields: [bankId], references: [id])

    is_deleted Boolean @default(false)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model CustomerData {
  id              String    @id @default(cuid())
  name            String
  mobile_number   String?
  city_name       String?
  area            String?
  expected_amount Int?
  serviceId       String?
  service         Services? @relation(fields: [serviceId], references: [id])

  created_by String
  createdBy  User          @relation(fields: [created_by], references: [id])
  amount     Transaction[]

  priority Priority @default(MEDIUM)

  is_deleted Boolean @default(false)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  ONHOLD
  CANCELLED
}

model Transaction {
  id          String   @id @default(cuid())
  bill_amount Int
  due_date    DateTime

  cardId   String?
  cardType CardsDetails? @relation(fields: [cardId], references: [id])

  status            Status    @default(PENDING)
  follow_up_date    DateTime?
  user_charge       Int?
  company_charge    Int?
  platform_charge   Int?
  additional_charge Int?

  serviceId String?
  service   Services? @relation(fields: [serviceId], references: [id])

  serviceName String?
  bankName    String?
  cardName    String?

  deposit_amount Int? @default(0)

  bankId String?
  bank   BankDetails? @relation(fields: [bankId], references: [id])

  leadId String?
  lead   CustomerData? @relation(fields: [leadId], references: [id])

  createdBy     String
  createdByUser User   @relation(fields: [createdBy], references: [id])

  is_deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
